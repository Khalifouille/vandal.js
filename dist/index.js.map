{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { BaseOptions, SegmentSeasonStats, TrackerResponse } from './types/tracker';\r\nimport { AgentStats, GamemodesStats, SeasonStats, UserInfo } from './types/internal';\r\n\r\nconst BASE_URL = `https://api.tracker.gg/api/v2/valorant/standard/profile/riot/{USERNAME}%23{TAG}`;\r\n\r\nconst fetchData = (url: string) =>\r\n    new Promise((resolve, reject) => {\r\n        fetch(url).then(res => res.json()).then(resolve).catch(reject);\r\n    });\r\n\r\nclass API {\r\n    username: string;\r\n    tag: string;\r\n    _raw: TrackerResponse;\r\n\r\n    constructor(username: string, tag: string) {\r\n        this.username = username;\r\n        this.tag = tag;\r\n    }\r\n\r\n    static async fetchUser(username: string, tag: string) {\r\n        const api = new API(username, tag);\r\n        api._raw = (await fetchData(BASE_URL.replace('{TAG}', tag).replace('{USERNAME}', username))) as TrackerResponse;\r\n        if (api._raw.errors) throw new Error(api._raw.errors[0].message);\r\n        return api;\r\n    }\r\n\r\n    ranked(options: BaseOptions = {}) {\r\n        const result = {} as SeasonStats;\r\n        const raw = options.raw ?? false;\r\n        const data = this._raw.data.segments.find((x) => x.attributes?.playlist == 'competitive');\r\n        if (raw) {\r\n            result._raw = data;\r\n        }\r\n        if (data?.stats) {\r\n            for (const key in data.stats) {\r\n                result[key] = data.stats[key].value;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    unrated(options: BaseOptions = {}) {\r\n        const result = {} as SeasonStats;\r\n        const raw = options.raw ?? false;\r\n        const data = this._raw.data.segments.find((x) => x.attributes?.playlist == 'unrated');\r\n        if (raw) {\r\n            result._raw = data;\r\n        }\r\n        if (data?.stats) {\r\n            for (const key in data.stats) {\r\n                result[key] = data.stats[key].value;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    gamemodes() {\r\n        const result = {} as GamemodesStats;\r\n        const playlists = this._raw.data.segments.filter((x) => x.type === 'season');\r\n\r\n        for (const playlist of playlists) {\r\n            const playlistName = playlist.metadata.playlistName;\r\n            result[playlistName] = {} as SeasonStats;\r\n            if (playlist) {\r\n                for (const key in playlist.stats) {\r\n                    result[playlistName][key] = playlist.stats[key].value;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    agents() {\r\n        const result = {} as AgentStats;\r\n        const agents = this._raw.data.segments.filter((x) => x.type === 'agent');\r\n\r\n        for (const playlist of agents) {\r\n            result[playlist.metadata.name] = {};\r\n            if (playlist) {\r\n                for (const key in playlist.stats) {\r\n                    result[playlist.metadata.name][key] = playlist.stats[key].value;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    info() {\r\n        const platform = this._raw.data.platformInfo;\r\n        const info = this._raw.data.userInfo;\r\n        const data = this._raw.data.segments.find((x) => x.attributes?.playlist == 'competitive');\r\n        const stats = data.stats as SegmentSeasonStats;\r\n\r\n        const result: UserInfo = {\r\n            platform: platform.platformSlug,\r\n            uuid: platform.platformUserId,\r\n            name: platform.platformUserHandle,\r\n            userid: platform.platformUserIdentifier,\r\n            avatar: platform.avatarUrl,\r\n            pageViews: info.pageviews,\r\n            rank: stats?.rank.metadata.tierName,\r\n            peakRank: stats?.peakRank.metadata.tierName,\r\n        };\r\n\r\n        return result;\r\n    }\r\n\r\n    raw() {\r\n        return this._raw;\r\n    }\r\n}\r\n\r\nexport {\r\n    API as VAPI, // compability\r\n    API,\r\n};"],"mappings":"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","names":[]}